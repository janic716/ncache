代码规范:
一. 变量命名:
    1. 包名使用全小写, 简短达意.
    2. 结构体, 函数名, 变量均用驼峰命名
    3. 定义函数变量, 或 参数为函数时, 以fn作为前缀
    4. 函数返回func,


二. 最小可见原则
    1. 包对外提供的常量, 变量, 结构体, 接口, 函数等 要求最小程度的对外可见.


三. 提交代码前, 使用 go fmt 格式化代码

四. 函数
    1. 定义有多返回值函数的时候, 返回类型前尽可能加变量名, 以便理解
        1)单个返回值可不加变量名
        2)函数有两个返回: 正常返回值和error, 可不加变量名, 但是鼓励加上
        3)如果函数有多个类型一样的返回值: 务必在定义返回类型的时候加上变量名

    2. 定义变量时请用可以表达变量意义的英文单词, 除了在for i:=0; i<num; i++; ...的情况, 不要用单个字母定义变量

    3. 函数中的传参, 返回命名, 变量都用小写开头的驼峰命名

    4. 通常情况下, 函数中出现的魔术数字, 都用常量或者用变量加以定义

    5.

五. 结构体
    1. 考虑到对齐(按机器字长, 即cpu一次能处理的字节长度), 定义 struct 的时候, 将 小字节类型(bool byte int8 unit8 int16 uint16)的字段放在后面, 这样可以节约内存
        比较以下两种结构体的sizeof:
            unsafe.SizeOf(struct{ bool; int64; int16 }) # 24
            unsafe.SizeOf(struct{ int64; int16; bool; }) # 16

    2.


六. 关于unsafe 包:
    0. unsafe可能会使代码不可移植和丧失go的兼容性保证. 除了极端性能需要, 尽量不要使用.
    1. 不容许用中间变量存放指针的uintptr, 如以下语句是不容许的(尽管运行时可能没有问题), 原因是: gc 可能会移动变量的所在内存,但不会更新uintptr的值
       a := 1
       tmp := uintptr(unsafe.Pointer(&a))
    2. 当调用一个库函数，并且返回的是uintptr类型地址时, 应该立即转换为unsafe.Pointer以确保指针指向的是相同的变量
